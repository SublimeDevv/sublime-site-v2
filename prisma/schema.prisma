// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted Boolean  @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  userRoles UserRole[]

  @@map("roles")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @db.VarChar
  userName     String   @map("user_name") @db.VarChar
  email        String   @db.VarChar
  passwordHash String   @map("password_hash") @db.VarChar
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted    Boolean  @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  userRoles UserRole[]
  posts     Post[]
  portfolio Portfolio[]

  @@map("users")
}

model Technology {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar
  description String   @db.VarChar
  icon        String   @db.VarChar
  color       String   @db.VarChar
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  postTechnologies PostTechnology[]

  @@map("technologies")
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar
  description String?  @db.VarChar
  icon        String   @db.VarChar
  color       String   @db.VarChar
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  postCategories PostCategory[]

  @@map("categories")
}

model UserRole {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted Boolean  @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role Role @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("users_roles")
}

model PostCategory {
  id         String   @id @default(uuid()) @db.Uuid
  postId     String   @map("post_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted  Boolean  @default(false) @map("is_deleted")
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  post     Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category Category @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("post_categories")
}

model PostTechnology {
  id           String   @id @default(uuid()) @db.Uuid
  postId       String   @map("post_id") @db.Uuid
  technologyId String   @map("technology_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted    Boolean  @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  post       Post       @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("post_technologies")
}

model Portfolio {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @db.VarChar
  description  String   @db.Text
  aboutMe      String   @map("about_me") @db.Text
  emailContact String?  @map("email_contact") @db.VarChar
  phone        String?  @db.VarChar
  isActive     Boolean  @map("is_active")
  slug         String   @db.VarChar
  userId       String   @map("user_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted    Boolean  @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects        Project[]
  workExperiences WorkExperience[]
  softSkills      SoftSkill[]
  socialMedia     SocialMedia[]

  @@map("portfolio")
}

model Post {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.VarChar
  coverImage  String?  @map("cover_image") @db.VarChar
  description String?  @db.Text
  content     String?  @db.Text
  isPublic    Boolean  @map("is_public")
  slug        String   @db.VarChar
  userId      String   @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postImages       PostImage[]
  postCategories   PostCategory[]
  postTechnologies PostTechnology[]

  @@map("posts")
}

model Project {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @db.VarChar
  description   String?  @db.Text
  urlSite       String?  @map("url_site") @db.VarChar
  urlRepository String?  @map("url_repository") @db.VarChar
  isActive      Boolean  @map("is_active")
  slug          String   @db.VarChar
  portfolioId   String   @map("portfolio_id") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted     Boolean  @default(false) @map("is_deleted")
  deletedAt     DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  portfolio     Portfolio      @relation(fields: [portfolioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projectImages ProjectImage[]

  @@map("projects")
}

model WorkExperience {
  id          String   @id @default(uuid()) @db.Uuid
  title       String?  @db.VarChar
  description String   @db.Text
  isActive    Boolean  @map("is_active")
  startDate   DateTime @map("start_date") @db.Date
  endDate     DateTime @map("end_date") @db.Date
  portfolioId String   @map("portfolio_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("work_experiencies")
}

model SoftSkill {
  id          String   @id @default(uuid()) @db.Uuid
  name        String?  @db.VarChar
  description String   @db.Text
  isActive    Boolean  @map("is_active")
  portfolioId String   @map("portfolio_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("soft_skills")
}

model SocialMedia {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar
  icon        String   @db.VarChar
  color       String   @db.VarChar
  url         String   @db.VarChar
  portfolioId String   @map("portfolio_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("socials_media")
}

model PostImage {
  id        String   @id @default(uuid()) @db.Uuid
  imageUrl  String   @map("image_url") @db.VarChar
  order     Int      @db.Integer
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted Boolean  @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("post_images")
}

model ProjectImage {
  id        String   @id @default(uuid()) @db.Uuid
  urlImage  String   @map("url_image") @db.VarChar
  projectId String   @map("project_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp
  isDeleted Boolean  @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("project_images")
}